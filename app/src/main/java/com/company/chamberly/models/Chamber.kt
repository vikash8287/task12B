package com.company.chamberly.models

import com.google.firebase.firestore.FieldValue
import java.io.Serializable

data class Chamber(
    var AuthorName: String = "", // Display name of the chamber author (retrieved from cache)
    var AuthorUID: String = "", // UID of the chamber author (retrieved from cache)
    var blockedUsers: List<String> = listOf(), // Empty array of blocked users
    var forPool: Boolean = false, // Set to false
    var groupChatId: String = "", // DocumentID generated by Firestore
    var groupTitle: String = "", // Chamber title entered by the user
    var isLocked: Boolean = false,
    //val locked: Boolean = false, // Set to false
    val members: List<String> = emptyList(),
    val membersLimit: Int = 2, // Set to 2
    var publishedPool: Boolean = true, // Set to true
    var lastMessage: String = "", // To store the last message of the chat
    val timestamp: Any = FieldValue.serverTimestamp() // Timestamp of chamber creation
): Serializable

fun Chamber.toMap(): HashMap<String, Any> {
    val chamberMap: HashMap<String, Any> = hashMapOf(
        "AuthorName" to this.AuthorName,
        "AuthorUID" to this.AuthorUID,
        "blockedUsers" to this.blockedUsers,
        "forPool" to this.forPool,
        "groupChatId" to this.groupChatId,
        "groupTitle" to this.groupTitle,
        "isLocked" to this.isLocked,
        "membersLimit" to this.membersLimit,
        "publishedPool" to this.publishedPool,
        "timestamp" to this.timestamp
    )
    return chamberMap
}

